<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>WebTech 2018</title>
	<!--link rel="stylesheet" href="css/styles.css"-->
</head>
<body>
	<div id="navigation">
		<nav>
			<ul>
        <li class="leftnav"><a href="index.html" class="icon">Webtech 2018</a></li>
				<li class="rightnav"><a href="#4">About Us</a></li>
				<li class="rightnav"><a href="#3">Quizzes</a></li>
				<li class="rightnav"><a href="index.html">Lecture Notes</a></li>
			</ul>
		</nav>
	</div>
	<div id="body-content">
		<div id="body-content-list">
				<ul id="menu">
					<li id="tab"><a href="#css">CSS</a>
						<ul>
							<li><a href="#css">[Definition and Description]</a></li>
							<li><a href="#version-history">Version History</a></li>
						</ul>
					</li>	
					<li id="tab"><a href="#hss">HTML Style Sheets</a>
						<ul>
							<li><a href="#author-styles">Author Styles</a></li>
							<li><a href="#user-styles">User Styles</a></li>
							<li><a href="#user-agent-styles">User Agent Styles</a></li>
						</ul>
					</li>
					<li id="tab"><a href="#css-statements">CSS Statements</a>
						<ul>
							<li><a href="#css-statements">[Definition and Description]</a></li>
							<li><a href="#at-rules">(@) At Rules</a></li>
							<li><a href="#css-rule-sets">CSS Rule Sets</a></li>
						</ul>
					</li>	
					<li id="tab"><a href="#css-selectors">CSS Selectors</a>
						<ul>
							<li><a href="#css2-dd">[Definition and Description]</a></li>
							<li><a href="#syntax">Syntax</a>
								<ul class="submenu2">
									<li><a href="#syntax-syntax">Syntax</a></li>
									<li><a href="#combinators">Combinators</a></li>
								</ul>
							</li>
							<li><a href="#selector-groups">Selector Groups</a></li>
							<li><a href="#simple-selectors">Simple Selectors</a>
								<ul class="submenu2">
									<li><a href="#universal">Universal Selector</a></li>
									<li><a href="#type">Type Selectors</a></li>
									<li><a href="#id">Id Selectors</a></li>
									<li><a href="#class">Class Selectors</a></li>
									<li><a href="#type">Attribute Selectors</a></li>
								</ul>
							</li>
							<li><a href="#pseudo-classes">Pseudo Classes</a>
								<ul class="submenu2">
									<li><a href="#dynamic-pseudo-classes">Dynamic Pseudo Classes</a></li>
									<li><a href="#target-pseudo-classes">Target Pseudo classes</a></li>
									<li><a href="#language">Language</a></li>
									<li><a href="#ui">UI Elements States Pseudo Classes</a></li>
									<li><a href="#structural">Structural Pseudo Classes</a></li>
									<li><a href="#negation">Negation Pseudo Classes</a></li>
								</ul>
							</li>
							<li><a href="#pseudo-elements">Pseudo Elements</a><li>
						</ul>
					</li>
					<li id="tab"><a href="#css-rule-precedence">CSS Rule Precedence</a>
						<ul>
							<li><a href="#intro">Introduction</a></li>
							<li><a href="#origin">By Origin and Importance</a></li>
							<li><a href="#specificity">By Specificity</a></li>
							<li><a href="#order">By Order</a></li>
							</li>
						</ul>
					</li>
					<li id="tab"><a href="#css-declarations">CSS Declarations</a>
						<ul>
							<li><a href="#properties">Properties</a>
							<ul class="submenu2">
									<li><a href="#shorthand-properties">Shorthand properties</a></li>
									<li><a href="#vendor-specific-extensions">Vendor Specific Extensions</a></li>
									<li><a href="#custom-properties">Custom Properties</a></li>
							</ul>		
							</li>
							<li><a href="#values">Values</a>
							<ul class="submenu2">
									<li><a href="#value-processing">Value Processing</a></li>
									<li><a href="#value-types">Value Types</a></li>
									<li><a href="#color">Colors</a></li>
									<li><a href="#string">Strings</a></li>
							</ul>
							</li>
						</ul>	
					<li id="tab"><a href="#css-preprocessors">CSS Preprocessors</a>
						<ul>
							<li><a href="#css-preprocessors-two">CSS Preprocessors</a>
								<ul class="submenu2">
									<li><a href="#codes">Codes</a></li>
								</ul>
							</li>
							
							<li><a href="#css-frameworks">CSS Frameworks</a></li>
							<li><a href="#css-polyfills">CSS Polyfills</a></li>
						</ul>
					</li>
				</ul>
		</div>
		
		
		<div id="body-content-content">
			<section id="css" class="notes">
                <br><br><br>
				<header><h2>Cascading Style Sheet</h2></header>
				<article>
					<p>CSS is used to design websites. It helps in altering the structure of your html file. 
					Through it, you can change fonts, colors, size and add styles to your webpages. 
					Because it is independent of HTML, it is easier to maintain websites and enable them for compatibility 
					for different platforms and environment. Nowadays, almost all webpages contains CSS codes.  It started in 1994 when 
					Hakon Wium Lie thought of creating a style sheet. Before, all web pages has no design. He was working at the MIT Media 
					Laboratory at that time and he saw the need of creating one. </p>
					<p>
					At that time, that wasn’t really entirely new because Tim Berners-Lee already started to use simple style 
					sheets before and he just didn’t publish its syntax.</p> 
					<div id="#version-history">
					<h3>History of CSS</h3>
						<li>1992 -Pei Wei created a browser (‘Viola’) with its own style sheet.</li>
						<li>1993 –NCSA Mosaic was released. It made the web known to the public. Fonts and colors can only be change.</li>
						<li>October 1994 
							<li>The release and testing of Mozilla’s first beta (Netscape Navigator) was announced by Marc Andreessen. 
							<li>They wanted to fulfill the requests of the authors which is the adding of additional features in order to enable more influences to their web pages.</li>
							<li>Three days before it was announced, the Cascading HTML Style Sheet proposal was published by Hakon Wium Lie.</li>
							<li>Bert Bos was building Argo (customable browser with style sheets) at that time. He joined forces with Hakon.</li>
						<li>November 1995 – W3C’s Arena Browser’s exlierimental suliliort for CSS</li>
						<li>December 1996 – CSS level 1 was liublished as a W3C Recommendation. </li>
						<li>November 1997 –CSS level 2 First liublic Working Draft was released</li>
						<li>March 1998 –The announcement of the first beta of CSS Validator was done</li>
						<li>May 1998 - CSS level 2 was liublished as a W3C Recommendation.</li>
						<li>January 1999 –W3C revised CSS level 1 Recommendation</li>
						<li>June 1999 –First 3 CSS3 drafts: Color lirofiles, Multi-column layout, and liaged Media</li>
						<li>August 2002 – First draft of revised CSS level 2 </li>
						<li>May 2003 – CSS Zen Garden was launched by Dave Shea
						<li>June 2011 - CSS3 Color Module was liublished as a W3C Recommendation.</li>
						<li>Aliril 2016 –First draft of 2nd revision of CSS level 2</li>
						<li>December 2016 -20th anniversary of CSS level 1</li>
					</div>
				</article>
			</section>
			<section id="hss" class="notes" >
				<header><h2>HTML Style Sheets</h2></header>
				<article>
					<p>The cascade algorithm selects the CSS declarations to determine the correct set of values for CSS properties. CSS declarations may originate from 3 different stylesheets:</p>
						 <p>User-Agent Style Sheet</p>
						 <p>Author Style Sheet</p>
						 <p>User Style Sheet</p>
					<div id="author-styles">
						<h3>Author Styles</h3>
						<article>
							<p>Author style sheets are part of a web page or site. The author of the web page defines the style to be rendered along with the document on a web browser. The author can use one or more style sheets to do so.</p>
						</article>
					</div>
					<div id="user-styles">
						<h3>User Styles</h3>
						<article>
							<p>The user (reader) of a website may use a custom user style sheet to override styles in browsers. They choose to do this to set websites’ styles to their own preferences for viewing.</p>
						</article>
					</div>
					<div id="user-agent-styles">
						<div><h3>User Agent Styles</h3>
						<article>
							<p>Web browsers have basic style sheets that defines the default style properties to be rendered for any document.</p>
						</article>   
						</div>
					</div>
				</article>	
			</section>
			<section id="css-statements" class="notes">
				<header><h2>CSS Statements</h2></header>
				<article>
					<p>CSS statements allows the Web author to convey the style he wants like the character set, external style sheets to import, font style and more. A statement is a block of code that begins with any non-space character and ends at the first closing brace or semicolon.</p>
				</article>
                <div>
                    <div id="at-rules">
                        <div>
                            <h3>(@) At Rules</h3>
                                <p>This is a CSS statement that begins with the ‘@’ sign, followed by an identifier, and ends with the last semicolon or the next block.</p>
								<ul>
									<li>@charset - used to define the character set in the stylesheet.</li>
									<li>@import - includes an external style sheet.</li>
									<li>@namespace - considers all its contents prefixed with an XML namespace.</li>
									<li>Nested at-rules - can be used as a statement of a style sheet and inside conditional group rules:
										<ul>
											<li>@media - content will be applied if it meets the condition using a media query.</li>
											<li>@supports - content will be applied if the browser meets the condition given.</li>
											<li>@document - content will be applied if the document in which the stylesheet is applied meets the given condition.</li>
											<li>@page - describes the layout of the document once it is printed.</li>
											<li>@font-face - describes the appearance of a downloaded font.</li>
											<li>@keyframes - describes the steps used in an animation sequence.</li>
											<li>@viewport - describes how the document would appear in small screen devices.</li>
											<li>@counter-style - defines the counter styles other than the predefined set of styles.</li>
											<li>@font-feature-values (includes @wash, @ornaments, @annotation, @stylistic, @styleset and @character-variant)</li>
										</ul>
									</li>
								</ul>	
						</div>
					</div>	
						<div id="css-rule-sets">
							<div>
							<article>
								<h3>CSS Rules Sets</h3>
									<p>Rulesets are a collection of CSS declarations. For example:</p>
									<p>h4 { color:red; font-style: italic; font-size: 15px}</p>
									<p>That whole statement is a ruleset. Inside the curly braces is a declaration block. A selector is declared before the opening curly brace. It is responsible for selecting the specific elements on an HTML page you want the rule set to affect. The  key or value pairs ending with a colon or semicolon, respectively, is a declaration. The declaration block contains everything between and including the curly braces. Whitespace inside the block is insignificant- it is only used for readability. The key is a property or aspect of an element you want to style and the value is the specific value or style you declare for the property.</p>
								<h4>Conditional Group Rules</h4>
									<p>These at-rules share a common syntax by including nested statements that are either rulesets or nested at-rules. These are also able to support some type of condition that leads to an answer of either true or false. If the result is true, then the statements will be applied within the group. These at-rules include: @media, @supports, and @document.</p>
							</article>
							</div>
                        </div>
				</div>
				<section id="css-selectors"><header><h2>CSS Selector</h2></header>
					<h3>CSS Selectors [Definition and Description]</h3>
					<article>
						<p>CSS selectors are being used to specify, to locate, or to choose the HTML elements for their own style or declaration. A selector can be a series of simple selectors separated by combinators. An element match with a selector is called a subject of the selector. </p>
					</article>
					<div id="syntax">
					<h3>Syntax</h3>
						<article>
						<div id="syntax-syntax">
							<h4>CSS Selector Syntax</h4>
							<img src="images/Syntax.jpg" style="width:300px;height:250px"></img>
						</div>
						<div id="combinators">
							<h4>Combinators</h4> 
								<p>Combinators are used to have a chain of selectors. It separates the simple selectors to other selectors to select the proper subject of the selector.</p>
								<table>
								<th>Combinators</th>
									<tr>
										<td>Pattern</td>
										<td>Examples</td>
										<td>Description</td>
										<td>Meaning</td>
									</tr>
									<tr>
										<td>element+element</td>
										<td>div + p</td>	
										<td>Adjacent Sibling Combinator</td>	
										<td>Selects all < p > elements where the parent is a < div > element</td>
									</tr>
									<tr>
										<td>element~element</td>	
										<td>p ~ ul</td>	
										<td>General Sibling Combinator</td>	
										<td>Selects every < ul > element aheaded by a < p > element</td>
									</tr>
									<tr>
										<td>element>element</td>	
										<td>ul > li </td>	
										<td>Child combinator</td>	
										<td>Selects all < li > element where the parent is < ul > element</td>
									</tr>
									<tr>
										<td>element element</td>	
										<td>ol li</td>	
										<td>Descendant combinator</td>	
										<td>Selects all < li > element inside < ol > element </td>
									</tr>
								</table>
						</div>	
						</article>
						<div id="selector-groups">		
						<h3>Groups of Selectors</h3>
							<article>
									<p>When there are many selectors that share the same declarations, it will be grouped into a comma-separated list.</p>
									<p>Example:	h1,h2,h3{color:black;text-decoration:underline;}</p>
									<p>Pattern: element,element<p>
							</article>
						</div>
						<div id="simple-selectors">
						<h3>Simple Selectors</h3>
							<article>
								<div id="universal-selector"><h4>Universal Selector</h4>
										<p>This selector which is written as (*) matches element to any type.</p>
										<img src="images/SimpleSelectorFig.1.jpg"></img>
								</div>
								<div id="type-selector"><h4>Type Selector</h4>
									<p>This allows you to match all element with the same type.</p>
									<img src="images/SimpleSelectorFig.2.jpg"></img>
								</div>
								<div id="id-selector"><h4>ID Selector</h4>
									<p>Just like a class selector, this selector also checks the content of an ID and match them if they have something in common.</p>
									<img src="images/SimpleSelectorFig.4.jpg"></img>
								</div>
								<div id="class-selector"><h4>Class Selector</h4>
									<p>Checks the content of a class and match them if they have something in common.</p>
									<img src="images/SimpleSelectorFig.3.jpg"></img>
								</div>
								<div id="attribute-selector"><h4>Attribute Selector</h4>
									<p>This selector checks the value of a given attribute and matches elements with the same attribute content. </p>
									<img src="images/SimpleSelectorFig.5.jpg"></img>
								</div>
							</article>
							</div>
						<div id="pseudo-classes">	
						<h3>Pseudo Class Selectors</h3>
							<p>Pseudo-class is introduced to a selector that specifies an abstract state or a certain characteristic of the specified element. Such pseudo class are placed before an element and a colon (:). The syntax for implementing css with pseudo classes:</p>
							<p> < pre ></p>
							<p> element/id/class:pseudoclass{ </p>
								<p>property: value;</p>
							<p>}</p>
							<p> < / pre></p>
							<article>
								<div id="dynamic-pseudo-classes">
								<h4>Dynamic Pseudo Classes</h4>
									<p>For instance, a pseudo class will be added to a link in such a way that when the cursor will hit the area wherein the link is located, the link will change its characteristic.</p>
										<p>< pre ></p>
										<p>a:hover {</p>
										<p>color: white;</p>
										<p>}</p>
										<p>< / pre ></p>
									<p>This means that every anchor element in HTML will change the font color to white when it is hovered. There are other common pseudo classes that are used to style hyperlinks like :link (used for selecting unvisited links), :visited (used for selecting visited links), :active (used for selecting and styling links that are being opened), and :focus (used for styling focused links). :hover and :focus pseudo classes are called “user action pseudo-classes” since it involves user to act on the site in order for the classes to work visually.</p>	
									<h5>Link</h5>
										<p>Link pseudo classes are case-insensitive. However, the best practice to write pseudo class names are all in lowercase. There is also an order in implementing link pseudo classes. Due to specificity of CSS, links can be matched to multiple selectors at the same time. For instance, when a user clicks the link, :hover and :active is matched by the link because the cursor is at the area of the link at the same time the link is being activated. So by default, the order of the link pseudo classes is in ascending order of:<p>
										<p>< pre ></p>
										<p>a { }</p>
										<p>a:link { }</p>
										<p>a: visited { }</p>
										<p>a: hover { }</p>
										<p>a: focus { }</p>
										<p>a: active { }</p>
										<p>< / pre ><p>
								</div>
								<div id="target-pseudo-classes">
								<h4>Target Pseudo-Classes</h4>
								<p>A pseudo class like :target selects elements with element ID that matches the ID from the current URL of the website. For instance, when the user accessed the site at URL www.example.com/#about with a div element with an ‘about’ ID in HTML and a selector #about:target in CSS, the css rule in #about:target is implemented since the selector and the current ID in URL matches. In this case, the div that has an ID of ‘about’ turns the background to gray.</p>
								<p>< pre ></p>
								<p>#about:target{</p>
									<p>background-color: gray;</p>
								<p>}</p>
								<p>< / pre ><p>
								</div>
								<div id="ui">
								<h4>UI element states pseudo-classes</h4>
									<p>There are also pseudo classes that can change the user experience of users or the functionality of the website like :enabled, :disabled, :checked, and :indeterminate. For the :enabled pseudo class, it selects user interface elements that are in default enabled state and can be used while for the :disabled pseudo class, it selects user interface elements that have an attribute of disabled and cannot be accessed. For the :checked pseudo class, it selects checkboxes and radio buttons that are checked. As for :indeterminate pseudo class, it selects radio buttons that are neither chosen or not chosen also known 
									as purgatory state wherein the page loads with radio buttons but doesn’t have default attributes.</p>
								</div>
								<div id="structural">
								<h4>Stuctural Pseudo-classes</h4>
									<p>Structural pseudo classes select based elements based on the document tree and it cannot be represented by any other selectors. The starting index is 1. :root pseudo class matches < html > element since this is the root element in HTML documents. For example, we will change the background color of the root element < html > to black.</p>
									<p>< pre ></p>
									<p>:root {</p>
										<p>background-color: black;</p>
									<p>}</p>
									<p>< / pre > <p>
										
										<p>:empty matches any element that has no value inside it or children. This means that the data length of the element is zero. For example, we will add a blue dotted border to all empty < p > elements.</p>
									<p>< pre ></p>
									<p>p:empty {</p>
									<p>border: 2px dotted blue;</p>
									<p>}</p>
									<p>< / pre ></p>

										<p>:first-child pseudo class matches the first child element of it’s parent element while the :last-child pseudo class matches the last child of its parent element. :only-child pseudo class matches the elements that are the only child of its parent and also doesn’t have children element/s. :nth-child(Ax+B) pseudo class matches elements from the pattern given at Ax+B as example. There are others like :first-of-type, :last-of-type, :only-of-type, :nth-of-type pseudo class selectors that pertains to the only elements on the document tree.</p> 
								</div>
								<div id="negation">
								<h4>Negation pseudo-classes</h4>
									<p>Negation pseudo class like :not represents elements that are not represented by its arguments. It can be also added inside an element tag in HTML negating the content of the element and can be also added in CSS. This pseudo class can negate a negation which is makes it affirmative. <p>
								</div>
							</article>
						</div>
						<div id="pseudo-elements">
							<h3>Pseudo Elements</h3>	
							<p>Pseudo Element is a keyword used to add a style to a specific area of an element. The double colon (::) is used for pseudo-elements instead of a colon (:) which is used for pseudo-classes. Only one pseudo-element is used in a selector.</p>
							<h4>Syntax</h4>
							<p>selector::pseudo-element{property: value;}
							<h4>Example</h4>
							<p>In this example, all the first line of every < element > will be styled.</p>
							<p>p::first-line{color::blue;text-transform: uppercase;}</p>
							<h4>Index of Standard-Pseudo Classes</h4>
								<li>::after
								<li>::before
								<li>::cue
								<li>::first-letter
								<li>::first-line
								<li>::selection
								<li>::slotted
								<li>::backdrop 
								<li>::placeholder 
								<li>::marker 
								<li>::spelling-error                                                                                                                
								<li>::grammar-error
						</div>	
					</div>				
				</section>
				<section id="css-rule-precedence"><header><h2>CSS Rule Precedence</h2></header>
					<div>
					<h3>Introduction</h3>
					<p>In CSS an element may be subjected to multiple style properties. Style properties that are unique in each element are cascaded and properties that are the same in each element conflict.</p>
					<p>The cascade algorithm takes an unordered list of values declared for a style property for an element, then sorts them according to the precedence of their declarations, and a single cascaded value is outputted.</p>
					</div>
					<div id="origin">
					<h3>By Origin and Importance</h3>
					<p>The precedence of various origins is in descending order:</p>
						<ol>
						<li>Transition declarations</li>
						<li>Important user agent declarations</li>
						<li>Important user declarations</li>
						<li>Important override declarations</li>
						<li>Important author declarations</li>
						<li>Animation declarations</li>
						<li>Normal override declarations</li>
						<li>Normal author declarations</li>
						<li>Normal user declarations</li>
						<li>Normal user agent declarations</li>
						</ol>
					</div>
					<div id="specificity">
					<h3>By Specificity</h3>
					<p>When two or more selectors apply to a single element, the one with higher specificity is cascaded. To calculate for a selector’s specificity:</p>
					<p>A = number of ID selectors in a selector</p>
					<p>B = number of pseudo-classes, attribute, and class selectors in a selector</p>
					<p>C = number of pseudo-elements and type selectors in a selector</p>
					<p>Universal Selectors(*) are ignored for calculating specificity. </p>
					<p>The one with the most specific selector will be in effect. </p>
					<p>Examples: </p>
						<table>
							<tr>
								<td>*	</td>		
								<td>A=0 B=0 C=0 </td>
							</tr>
							<tr>
								<td>LI</td>		
								<td>A=0 B=0 C=1</td></tr>
							<tr>
								<td>OL LI</td>		
								<td>A=0 B=0 C=2</td>
							</tr>
							<tr>
								<td>LI.class</td>		
								<td>A=0 B=1 C=1</td></tr>
							<tr>
								<td>#idselector	</td>  
								<td>A=1 B=0 C=0</td>
							</tr>
						</table>
					</div>
					<div id="order">
					<h3>By Order of Appearance</h3>
					<p>The last declaration of each of all elements in all documents imported or externally linked to an html document will be the style that will be rendered by a browser. The cascade will output a sorted list of declarations for every style property of every element</p>
					</div>
				</section>
				<section id="css-declarations"><header><h2>CSS Declarations</h2></header>
				<p>A CSS declaration is consist of a property with a value pair. CSS engines assign declarations to elements of a page to apply the specified layout and design. The properties have certain valid values. If the value of a property is not valid, it is ignored by the CSS engine.</p>
				<div id="properties">
					<h3>a. Properties</h3>
					<div id="shorthand-properties">
					<h4>Shorthand properties </h4>
						<p>This property makes you design your html easier and make your CSS codes more concise. However, some browsers don’t have support for this property.</p>
						<p>e.g.</p>
						<p>Common CSS</p>
						<p>body{background: url(“bg.gif”);background-color: #fff;}</p>
						<p>Shorthand</p>
						<p>body{background: url(“bg.gif”) #fff repeat-x;}</p>
					</div>
					<div id="vendor-specific-extensions">
					<h4>Vendor specific extensions (A.K.A vendor prefixes)</h4>
						<p>browser creators are allowed to implement extensions to CSS extensions. These extensions are usually used to release and test browser features for W3C drafts before they become CSS properties. Property names that begins with a dash (-) or an underscore (_) was set for vendor-specific extensions.</p>
						<p>.test{</p>
						  <p>background: red; </p>
						 <p> /* IE filter extension */ </p>
						  <p>filter: progid:DXImageTransform.Microsoft.Alpha(opacity=60); </p>
						 <p> width:100%;                /* Required for IE filter */ </p>
						 <p> -moz-opacity: 0.6;         /* Mozilla extension */ </p>
						 <p> -khtml-opacity:0.6;        /* Konqueror extension (Safari 1.1)*/ </p>
						 <p> opacity: 0.6;              /* the correct CSS3 syntax */ </p>
						<p>}</p>
					</div>
					<div id="custom-properties">
					<h4>Custom properties</h4> 
					<p>These are property names with prefix --. They are personally made by the developer. They can be reused through the (var()) function.</p>
						<p>Syntax:</p>
						<p><declaration-value></p>
						<p>e.g. </p>
						<p>:root {</p>
						<p>	--first-color: #488cff; </p>
						<p>  --second-color: #ffff8c; </p>
						<p>} </p>
						<p>#firstParagraph { </p>
						<p>  background-color: var(--first-color); </p>
						<p>	  color: var(--second-color); </p>
						<p>} </p>
					</div>
				</div>
				<div id="values">
				<h3>Values </h3>
					<p>Values describe how the feature must be handled by the browser engine. Each property has their own appropriate values, having a formal grammar and sematic meaning, that can be executed by the browser engine.</p>
					<div id="value-processing">
					<h4>Value-processing</h4>
						<p>The given value in a CSS property for a given element is the result of many steps being calculated.</p>
						<h5>Declared Values</h5>
							<p>Each declaration of property applied to an element gives a declared value for that property will be with the element. Then the values will be processed to choose a single “winning value” by the cascade.</p>
							<p>Cascade sorts the unordered list of declared values by their declaration’s priority and outputs a single cascaded value.</p>
						<h5>Cascaded Values</h5>
							<p>This value represents the result of the cascade. The declared value that wins the cascade but if the output of the cascade is empty then there is no cascaded value.</p>
						<h5>Specified Values </h5>
							<p>The value of a property that the author purposely set for that element. The specified value is the cascaded value in some cases of the declarations. But if there is no cascaded value then the specified value is defaulted. </p>
							<p>Inherited properties have their defaults from their parent element through inheritance and other properties take their initial value. It can be requested by the author through inherit and initial keywords.</p>
						<h5>Computed Values</h5>
							<p>This value is the result of having a solution to the specified value, generally making it absolute in preparation for inheritance. The computed value is transferred from parent to child during the inheritance. </p>
						<h5>Used Values</h5>
							<p>It is the result of getting the computed value and completing the remaining calculations to be absolute theoretical value used.</p>
						<h5>Actual Values</h5>
							<p>This is the used value after some adjustments have been made. The adjustments that user agent may not use of the used value in a given environment, like the font size may need some adjustment for the availability of fonts or the value for the property ‘font-size-adjust’.</p>
					</div>
					<div id="examples">
					<h4>Examples</h4>
					<img src="images/DeclarationValueFig-1.jpg"></img>
					<p>Reference: https://www.w3.org/TR/css-cascade-4/#value-stages</p>
					</div>
				<div id="value-types">
					<h4>Value Types</h4>
					<h5>Keywords</h5>
						<p>Keywords are value types which is a CSS identifier and some keywords are accepted in all CSS properties like the keywords inherit, initial and unset. Keywords appears literally, which it has no quotation marks.<p>
						<p>Examples: auto, smaller or ease-in</p>
					<h5>Numbers or Numeric values</h5>
					<h5>Dimensions</h5>
						<p>Refers to a number with a unit attached. It is use to specify the distance or length, duration or time, frequency, and resolution.</p>
						<p>Length-Units</p>
						<p>Two types: Relative and Absolute units</p>
						<p>Relative units use for relating another length. It generates flexible output. </p>
						<p>Examples:</p> 
						<li>em- relevant in font-size</li>
						<li>ex- ‘x-height’ of fonts</li>
						<li>rem- font size of root element</li>
						<li>vw- viewport’s width</li>
						<li>vh-viewport’s height</li>
						<p>Absolute units are specified fixed width. It is useful when the length of output is known. Consist of the physical units (in, cm, mm, pt, pc) and visual angle unit (px).</p>
						<p> Examples:</p>
							<table> 
								<tr>
									<td>cm-centimeters</td>
									<td>in-inches</td>
									<td>pc-picas</td>
								</tr>
								<tr><td>mm-milimeters</td>
									<td>pt-points</td></tr>
									<td>px-pixels</td> 
								</tr>
							</table>
						<p>Other quantities</p>
							<table>
									<tr>
									<td>Angle Units</td>
									</tr>
									<tr>
									<td>deg</td>
									<td>degree</td>
									</tr>
									<tr>
										<td>grad</td>	
										<td>gradians</td>
									</tr>
									<tr>
										<td>rad</td>	
										<td>radians</td>
									</tr>
									<tr>
										<td>turn</td>	
										<td>turn</td>
									</tr>	
							</table>
							<table>
									<tr>
									<td>Duration Units</td>
									</tr>
									<tr>
									<td>s</td>
									<td>seconds</td>
									</tr>
									<tr>
										<td>ms</td>	
										<td>milliseconds</td>
									</tr>
							</table>
							<table>
								<tr>
									<td>Frequency Units<td>
								</tr>
								<tr>
									<td>hz</td>
									<td>hertz</td>
								</tr>
								<tr>
									<td>kHz</td>
									<td>kilohertz</td>
								</tr>
							</table>
							<table>
									<tr>
									<td>Resolution  Units</td>
									</tr>
									<tr>
									<td>dpi</td>
									<td>dots per inch</td>
									</tr>
									<tr>
										<td>dpcm</td>	
										<td>dots per centimeter</td>
									</tr>
									<tr>
										<td>dppx</td>	
										<td>dots per px unit</td>
									</tr>
							</table>
						<h5>Percent</h5>
							<p>A value having a number with percent sign, indicating the value which is some fraction of other value. Percentage can be applied in different data type like length-percentage represents a fraction of a length value.</p>
							<p>Examples: width: 50%; line-height: 200%; voise-pitch:25%;</p>
						<h5>URL and URIs</h5>	
							<p>Resource locators having a syntax of url(“http://www.google.com/singing.gif”); -it can be also written without quotation marks.</p>
				</div>
					<div id="color">
						<h4>Colors</h4>
						<p>Used to define a color value having two formats.</p>
						<p>Keyword or the name of the color and numbers with some color notations like #rgb rgb() -combination of red green blue, rgba()- red, green, blue with opacity, hsl ()- hue, saturation and lightness and hsla()- hue, saturation, lightness with opacity.</p>
						<p>Examples: color: black; color: #000; color: rgb(0,0,0), color: rgba(0,0,0,1); color: hsl(0,0%,0%); color: hsla(0,0%,0%, 1);</p>
					</div>
					<div id="strings">
					<h4>Strings</h4>
						<p>Having a sequence of characters used to some CSS properties like content, font-family, and label. It can be surrounded by double quotes or single quotes. Most characters can be represented with their respective Unicode code points example \22 represents a double quote (“ ”). </p>
						<p>Examples: font-family: "Arial Black", Gadget, sans-serif; content: \2193;</p>
					</div>	
				</div>
				</section>
			<section id="css-preprocessors"><header>CSS Preprocessors</header>
				<p>A preprocessor is a program that converts one type of data to another. CSS Preprocessors generate CSS using a custom language syntax that typically includes features that don’t exist in pure CSS. This way, writing code is made easier and extended with more features and assets. </p>
				<div>
					<h4>SASS (Syntactically Awesome Style Sheets)</h4>
						<p>Sass is a scripting language that when compiled, is converted to CSS. The designer and developer of this scripting language are Hampton Caitlin and Natalie Weizenbaum, respectively. Later, SassScript was created. It is an extension of Sass- a scripting language itself. The separation of code blocks and rules is possible by using indentation and newline characters. Several mechanisms observed in traditional programming languages like object-oriented languages are available extensions.</p>

					<h5>Variables</h5>
						<p>Sass allows the initialization of variables. Variables are declared using a dollar sign ($) and assigned with a colon (:). Numbers (including units), String (with or without quotes), Colors (names), and Boolean data types are supported.</p>
						
						<p>Sass</p>
					<div id="codes">
						<p>$primary-color: #990a</p>
						<p>$margin: 12px</p>

					<p>.content-nav</p>
							<p>border-color: $primary-color</p>
							<p>padding: $margin</p>
							<p>margin: $margin/2</p>

						<p>Would compile to:</p>

						<p>.content-nav {</p>
							<p>border-color: #990a;</p>
							<p>padding: 12px;</p>
						<p>margin: 6px;</p>
						<p>} </p>
					<h5>Nesting</h5>
						<p>Nesting inserts nested code within each other. This way, visual hierarchy can be easily noticed.</p>

						<p>Sass</p>
						<p>tr </p>
							<p>font: </p>
						  <p> family: Verdana; </p>
						   <p> size: 1.6em; </p>

					<p>Would compile to: </p>

					<p>tr {</p>
					  <p>  font-family: Verdana; </p>
					   <p> font-size: 1.6em; </p>
					<p>}</p>

					<p>Loops</p>
						<p>The loops @for, @each, and @while, can be used to apply different styles to similar elements through iteration. </p>

						<p>Sass</p>
					<p>$counter: 4</p>
					<p> @for $i from 1 through $counter</p>
								<p> #name-#{$i}</p>
								<p> background-color: green</p>
								<p>  height: 50px</p>

						<p> Would compile to: </p>

						<p> #name-1{</p>
						<p>	background-color: green; </p>
						<p>	height: 50px; </p>
						<p> }</p>
						<p> #name-2{</p>
						<p>	background-color: green; </p>
						<p>	height: 50px; </p>
						<p> }</p>
						<p> #name-3{</p>
						<p>	background-color: green; </p>
						<p> }</p>
					<p> #name-4{</p>
						<p>	background-color: green; </p>
						<p>	height: 50px; </p>
						<p>}</p>
						
					<p>Sass</p>
					<p>.block {</p>
					<p>	margin: 12px 8px; </p>
					<p>	border: 1px; </p>
					<p>	background: #ddd</p>
					<p>}</p>

					<p>h1 {</p>
					<p>	@extend .block; </p>
					<p>	font-size: 16px; </p>
					<p>	text-transform: lowercase; </p>
					<p>}</p>

					<p>Would compile to: </p>

					<p>.block, h1 {</p>
					<p>	margin: 12px 8px; </p>
					<p>	border: 1px; </p>
					<p>	background: #ddd</p>
					<p>}</p>

					<p>h1 {</p>
					<p>	font-size: 16px; </p>
					<p>	text-transform: lowercase; </p>
					<p>}</p>
					</div>
					
				</div>
				<div id="css-frameworks">
					<h4>CSS Frameworks</h4>
					<p>A CSS Framework is a package of predefined files and folders of code that aims for easier and more standard-compliant web design. Through frameworks, CSS functionalities can be reused, extended, and customized.</p>
					<h5>Bootstrap</h5>
						<p>Bootstrap is basically a free front-end framework that includes various HTML and CSS design templates and JavaScript plugins. This allows you to use existing templates for forms, buttons, navigation, tables, and many more including being able to create responsive designs. It was developed by Mark Otto and Jacob Thornton.</p>

					<h5>Foundation<h5>
						<p>Foundation, an internal style guide built and maintained by ZURB, is a free and responsive front-end framework that provides HTML and CSS design components, templates, code snippets and many more. It includes other interface elements such as buttons, navigation, and typography. It was built with Sass, making it easy to style and extend.</p>
				</div>
				<div id="css-polyfills">
					<h4>CSS Polyfills</h4>
						<p>A polyfill provides an extension of a browser’s technology that isn’t provided natively but developers expect it to be. It is a piece of code or plugin that flattens the API landscape.</p>
					<h5>Modernizr</h5>
						<p>Modernizr is a Javascript library that has the ability of detecting implemented features of HTML5 and CSS3 in different browsers. This allows developers to maximize new features that a browser offers and also have a fallback when browsers do not. Instead of looking into the properties of the browser, feature detection is able to recognize what a browser supports.<p>
						<p>Feature detection is more reliable by creating tests for more than 250 features. These results are then stored in a JavaScript object called Modernizr. Classes to the HTML element are also added based on features that are and are not natively supported. Feature detection involves creating an element with a specific style instruction then retrieving that setting. If a web browser supports that feature, it will return something sensible since it understands the instruction. Otherwise, nothing or “undefined” is returned.<p>
				</div>
			</section>
				
		</div>
	</div>
	
</body>
</html>
